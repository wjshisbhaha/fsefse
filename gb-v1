import cv2
import numpy as np
import os

# 设置要处理的文件夹路径
folder_path = "/Users/longaotian/Desktop/gb"  # 替换为你的图片文件夹路径
output_folder = os.path.join(folder_path, "processed")  # 处理后图片的保存目录

# 确保输出文件夹存在
if not os.path.exists(output_folder):
    os.makedirs(output_folder)

# 获取文件夹内的所有图片文件
image_files = [f for f in os.listdir(folder_path) if f.lower().endswith(('.png', '.jpg', '.jpeg'))]

# 遍历每张图片
for image_file in image_files:
    image_path = os.path.join(folder_path, image_file)
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

    if image is None:
        print(f"无法读取图像: {image_file}")
        continue

    # 进行二值化处理
    _, binary_image = cv2.threshold(image, 127, 255, cv2.THRESH_BINARY)

    # 查找光斑轮廓
    contours, _ = cv2.findContours(binary_image, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # 确保找到轮廓
    if not contours:
        print(f"未检测到光斑: {image_file}")
        continue

    # 找到最大光斑轮廓（按面积排序）
    max_contour = max(contours, key=cv2.contourArea)

    # 直接在原图上绘制轮廓（转换为 BGR 以便绘制彩色）
    image_with_contours = cv2.cvtColor(image, cv2.COLOR_GRAY2BGR)

    # 仅绘制最大光斑的轮廓（绿色，细线条）
    cv2.drawContours(image_with_contours, [max_contour], -1, (255, 0, 0), 1)  # 绿色轮廓，线条厚度1px

    # 计算边界框
    x, y, w, h = cv2.boundingRect(max_contour)

    # 计算上下左右坐标
    points = {
        "上": (x + w // 2, y),
        "下": (x + w // 2, y + h),
        "左": (x, y + h // 2),
        "右": (x + w, y + h // 2)
    }

    # 计算直径
    diameter_x = points["右"][0] - points["左"][0]  # 右的 x 坐标 - 左的 x 坐标
    diameter_y = points["下"][1] - points["上"][1]  # 下的 y 坐标 - 上的 y 坐标

    # 计算并输出灰度值
    print(f"{image_file} - 上 坐标: {points['上']}, 灰度值: {image[points['上'][1], points['上'][0]]}")
    print(f"{image_file} - 下 坐标: {points['下']}, 灰度值: {image[points['下'][1], points['下'][0]]}")
    print(f"{image_file} - 左 坐标: {points['左']}, 灰度值: {image[points['左'][1], points['左'][0]]}")
    print(f"{image_file} - 右 坐标: {points['右']}, 灰度值: {image[points['右'][1], points['右'][0]]}")
    print(f"{image_file} - 最大光斑直径 X: {diameter_x}px, 直径 Y: {diameter_y}px")

    # 保存处理后的图片
    output_path = os.path.join(output_folder, f"processed_{image_file}")
    cv2.imwrite(output_path, image_with_contours)
    print(f"处理完成: {image_file}, 结果已保存至 {output_path}")

print("所有图片处理完成！")
